// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId Int @id @default(autoincrement()) @map("userId")
  id String @unique @map("id")
  email String @unique @map("email")
  password String @map("password")

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  UserInfos UserInfos?  //1:1 한 유저는 한 유저의 정보
  Character Character[] //1:N 한 유저는 여러 캐릭터를 가짐
  Item      Item[]     //1:N 한 유저는 여러 아이템을 가짐(캐릭터에 다시 정의)

  @@map("Users")
}

model UserInfos {
  userInfoId Int @id @default(autoincrement()) @map("userInfoId")
  UserId Int @unique @map("UserId") //외래키 유니크 생성
  name String @map("name")
  age Int? @map("age")   //null 가능함
  gender String @map("gender")
  profileImage String? @map("profileImage")

  user Users @relation(fields: [UserId], references: [userId], onDelete: Cascade )

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")


  @@map("UserInfos")
}

model Character {
  characterId Int @id @default(autoincrement()) @map("characterId")
  UserId Int @map("UserId") //외래키 생성
  name String @map("name")
  health Int @default(100) @map("health") // 기본값 100 설정
  power Int @default(50) @map("power")    // 기본값 50 설정
  money Int @default(0) @map("money")     // 기본값 0 설정

  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  user Users @relation(fields: [UserId], references: [userId],onDelete: Cascade)

  Item      Item[]      //1:N 한 캐릭터는 여러 아이템을 가짐
  @@map("Character")
}

model Item {
  itemId Int @id @default(autoincrement()) @map("itemId")

  UserId Int @map("UserId")
  CharacterId Int @map("CharacterId")
  
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields:[UserId], references: [userId], onDelete: Cascade)
  Character Character @relation(fields:[CharacterId], references: [characterId], onDelete: Cascade)

}